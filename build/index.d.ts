// Generated by dts-bundle-generator v8.0.1

import { Component, Entity, Schema, System } from 'aframe';

/**
 * マイクを扱うクラス
 * @class Mic
 * @category WebAPI
 * @group Device
 *
 * @example
 * import { Mic  } from "v-air_sdk";
 *
 * const mic = new Mic();
 * const micList = await mic.getList();
 * console.log(micList);
 *
 * */
export declare class Mic {
	constructor();
	/**
	 * マイクの一覧を取得する
	 * @returns マイクの一覧
	 * */
	getList(): Promise<MediaDeviceInfo[]>;
}
/**
 * window.fetchのラッパー関数
 * @function fetch
 * @category WebAPI
 * @group network
 * @more https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 *
 * @example
 * import { fetch } from "v-air_sdk";
 *
 * const text = "aaa";
 * const file = new Blob([text], {
 *   type: "text/plain"
 * });
 * const formData = new FormData();
 *
 * (async () => {
 *   formData.append("file", file, "sample.txt");
 *
 *   const res = await fetch("https://httpbin.org/post", {
 *     method: "POST",
 *     body: formData
 *   })
 *   const json = await res.json();
 *   console.log(json)
 *   console.assert(json.files.file === text)
 * })();
 *
 * */
export declare const fetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;
export declare class ABSComponent<T extends object = any, S extends System = System> implements Component {
	attrName?: string | undefined;
	data: T;
	dependencies?: string[] | undefined;
	el: Entity;
	id: string;
	initialized: boolean;
	multiple?: boolean | undefined;
	name: string;
	schema: Schema<T>;
	system: S | undefined;
	events?: any;
	init(data?: T): void;
	pause(): void;
	play(): void;
	remove(): void;
	tick?(time: number, timeDelta: number): void;
	tock?(time: number, timeDelta: number, camera: THREE.Camera): void;
	update(oldData: T): void;
	updateSchema?(): void;
	extendSchema(update: Schema): void;
	flushToDOM(): void;
	constructor();
}

export {};
